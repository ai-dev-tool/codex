# Codex CLI 最佳实践

本文档概述了使用 Codex CLI 开发的最佳实践，涵盖代码组织、常见模式、性能考虑、安全性、测试、常见陷阱和工具使用。

## 1. 代码组织和结构

- **目录结构：**
  - 将组件按功能或领域组织到逻辑目录中
  - 每个组件应该有自己独立的文件，文件名应与组件名相同
  - 考虑在每个目录中使用 `index.ts` 文件导出该目录下的所有组件
  - 目录结构应反映 UI 层次结构

- **文件命名规范：**
  - 组件文件名使用 PascalCase（如 `MyComponent.tsx`）
  - 变量和函数名使用 camelCase（如 `handleClick`）
  - 使用能清晰表明组件或函数用途的描述性名称

- **模块组织：**
  - 将复杂组件拆分为更小的可重用模块
  - 保持组件专注于单一职责
  - 使用共享工具函数和常量避免代码重复
  - 使用 `utils` 目录存放辅助函数

## 2. 常见模式和反模式

- **Codex CLI 特定设计模式：**
  - 尽可能利用 Codex CLI 提供的现有组件
  - 使用 Tailwind CSS 的实用类或 CSS 变量自定义组件
  - 通过组合现有组件创建复合组件

- **常见任务推荐方法：**
  - 使用 Codex CLI 的表单组件处理用户输入
  - 遵循 ARIA 指南实现可访问组件
  - 使用 `cn` 工具有效管理 CSS 类名

- **需要避免的反模式和代码异味：**
  - 直接修改 Codex CLI 组件代码
  - 过度使用自定义 CSS
  - 忽视可访问性考虑
  - 创建职责过多的复杂组件

## 3. 性能考虑

- **优化技术：**
  - 使用 `React.memo` 减少不必要的重渲染
  - 使用 useCallback 优化事件处理函数
  - 对昂贵操作使用防抖或节流

- **内存管理：**
  - 在 `useEffect` 中正确清理事件监听器和定时器
  - 及时释放不再需要的大型数据结构

- **渲染优化：**
  - 对大数据集使用虚拟化列表或网格
  - 批量处理 DOM 更新以减少重排和重绘
  - 使用 CSS containment 隔离渲染变化

## 4. 安全最佳实践

- **常见漏洞防范：**
  - 通过清理用户输入和转义 HTML 实体防止 XSS 攻击
  - 使用反 CSRF 令牌防止 CSRF 攻击
  - 避免在客户端代码中存储敏感信息

- **输入验证：**
  - 在客户端和服务器端都验证用户输入
  - 使用 Zod 或 Yup 等验证库定义数据模式
  - 清理用户输入以移除潜在有害字符

## 5. 测试方法

- **单元测试策略：**
  - 为单个组件和函数编写单元测试
  - 使用 Jest 或 Mocha 等测试框架
  - 测试组件在不同属性和输入下的行为

- **集成测试：**
  - 编写集成测试验证组件协同工作
  - 测试组件与 API 的交互

- **端到端测试：**
  - 编写端到端测试模拟用户交互
  - 使用 Cypress 或 Playwright 等测试框架

## 6. 常见陷阱和注意事项

- **开发者常犯错误：**
  - 忘记处理边界情况
  - 过度复杂化组件
  - 忽视可访问性
  - 忽略性能考虑

- **需要注意的边缘情况：**
  - 处理不同屏幕尺寸和设备
  - 处理慢速网络连接
  - 处理无效或意外用户输入

## 7. 工具和环境

- **推荐开发工具：**
  - VS Code 及其 React、TypeScript 和 Tailwind CSS 扩展
  - 带有开发者工具的浏览器
  - 用于运行命令和脚本的终端

- **构建配置：**
  - 使用 Webpack、Parcel 或 Rollup 等构建工具
  - 配置构建工具优化生产代码

- **代码规范：**
  - 使用 ESLint 强制执行代码风格
  - 使用 Prettier 自动格式化代码
  - 配置编辑器在保存时自动检查和格式化代码 